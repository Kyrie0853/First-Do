#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>

void init_board(char board[][3]) {
    for (char i = 0; i < 3; i++) {
        for (char j = 0; j < 3; j++) {
            board[i][j] = ' ';
        }
    }
}

void print_board(char board[][3]) {
    printf("                 %c | %c | %c \n", board[0][0], board[0][1], board[0][2]);
    printf("               _____________\n");
    printf("                 %c | %c | %c \n", board[1][0], board[1][1], board[1][2]);
    printf("               _____________\n");
    printf("                 %c | %c | %c \n", board[2][0], board[2][1], board[2][2]);
}

char check_winner(char board[][3]) {
    // 检查行
    for (char i = 0; i < 3; i++) {
        if (board[i][0] != ' ' && board[i][0] == board[i][1] && board[i][0] == board[i][2]) {
            return board[i][0];
        }
    }

    // 检查列
    for (char j = 0; j < 3; j++) {
        if (board[0][j] != ' ' && board[0][j] == board[1][j] && board[0][j] == board[2][j]) {
            return board[0][j];
        }
    }

    // 检查对角线
    if (board[0][0] != ' ' && board[0][0] == board[1][1] && board[0][0] == board[2][2]) {
        return board[0][0];
    }
    if (board[0][2] != ' ' && board[0][2] == board[1][1] && board[0][2] == board[2][0]) {
        return board[0][2];
    }

    return ' ';
}

void player_move(char board[][3]) {
    while (1) {
        int x, y;

        printf("玩家下>\n");
        printf("请输入坐标（行 列）：");
        scanf("%d %d", &x, &y);

        if (x >= 1 && x <= 3 && y >= 1 && y <= 3) {
            if (board[x - 1][y - 1] == ' ') {
                board[x - 1][y - 1] = 'X';
                break;
            }
            else {
                printf("坐标被占用，请选择其他位置\n");
            }
        }
        else {
            printf("输入错误，请重新输入\n");
        }
    }
}

void computer_move(char board[][3]) {
    while (1) {
        printf("电脑下>\n\n\n\n\n");
        int x = rand() % 3;
        int y = rand() % 3;
        if (board[x][y] == ' ') {
            board[x][y] = 'O';
            break;
        }
    }
}

void game() {
    char board[3][3];

    init_board(board);
    print_board(board);

    while (1) {
        player_move(board);
        print_board(board);

        if (check_winner(board) == 'X') {
            printf("玩家胜利！\n");
            break;
        }
        if (check_winner(board) == 'O') {
            printf("电脑胜利！\n");
            break;
        }
        if (check_winner(board) == ' ' && is_full(board)) {
            printf("游戏平局！\n");
            break;
        }

        computer_move(board);
        print_board(board);

        if (check_winner(board) == 'X') {
            printf("玩家胜利！\n");
            break;
        }
        if (check_winner(board) == 'O') {
            printf("电脑胜利！\n");
            break;
        }
        if (check_winner(board) == ' ' && is_full(board)) {
            printf("游戏平局！\n");
            break;
        }
    }
}

int is_full(char board[][3]) {
    for (char i = 0; i < 3; i++) {
        for (char j = 0; j < 3; j++) {
            if (board[i][j] == ' ') {
                return 0;
            }
        }
    }
    return 1;
}

int main() {
    int choice;

    printf("*******三子棋********\n");

    do {
        printf("*******1.GAME********\n");
        printf("*******2.EXIT********\n");
        printf("请选择操作：");
        scanf("%d", &choice);

        switch (choice) {
        case 1:
            game();
            break;
        case 2:
            printf("退出游戏！\n");
            break;
        default:
            printf("输入错误，请重新输入！\n");
            break;
        }
    } while (choice != 2);

    return 0;
}
